会话：每次每个客户的请求为一次会话。刷新页面或者重启服务器都是一次新的会话，所以cookie和session在刷新页面或者重启服务器后都会清空。

cookie
在客户端记录信息，来确定用户的身份和登录状态，

前端代码：
每一次http请求都会带给服务器当前域下cookie值，服务器通过解析加密后的cookie值，来辨识当前用户的信息，这些用户的信息都是存储在客户端，也就是浏览器的键值对，可以删除、更改、设置过期日期，cookie有最大键值对数量限制，Firefox每个域名cookie限制为50个。Opera每个域名cookie限制为30个。Safari/WebKit没有cookie限制。但是如果cookie很多，则会使header大小超过服务器的处理的限制，会导致错误发生。对总大小也有限制Firefox和Safari允许cookie多达4097个字节，包括名（name）、值（value）和等号。Opera允许cookie多达4096个字节，包括：名（name）、值（value）和等号。Internet Explorer允许cookie多达4095个字节，包括：名（name）、值（value）和等号。多字节字符计算为两个字节。在所有浏览器中，任何cookie大小超过限制都被忽略，且永远不会被设置。

session
在服务器端记录信息，来确定用户的身份和登录状态。

服务器端代码：
当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里面是否包含了一个session的标识sessionid，如果已经包含了sessionid就说明已经为这个客户端创建过session，服务器就根据这个sessionid把这个session找出来就行了，如果这个客户端没有这个sessionid，就要为这个客户端创建一个session并且生成一个跟这个session关联的一个sessionid，这个sessionid应该是一个不容易重复，并且不容易被找到规律的一个字符串，防止被伪造。这个sessionid会返回给客户端保存起来。

保存这个sessionid的方式可以采用cookie，这样的话，在交互的过程中，浏览器可以自动的按照规则，把这个标识发送给服务器，一般来说cookie的名字都是类似于session，cookie解析之后得到sessionid的值，通过sessionid的值从数据库中查找相应的session数据。一般情况下，session会存储在内存中，重启服务器后，便不能被使用，如果将其存在硬盘中，重启后仍然可以使用。对于session持久化可以用cookie、内存、数据库等方式。

此次保持用户登录状态采用mongodb 数据库存储session方式

存储过程：
//cookieParser能够使req.cookies通过cookieParser读取客户端设置的cookie值，通过res.cookie(name, value [, options])对cookie进行设置，对cookie值进行解析等。
app.use(express.cookieParser());
//初始化数据库
var mongoStore = require("connect-mongo")(express);

//session存储会话信息，存入mongoStore中。此时若为第一次创建session则生成sessionid，并将session对象存储在数据库中。
app.use(express.session({
    secret:"pc movie",
    store: new mongoStore({
        url: dbUrl,
        collection: "sessions"
    })
}));

登录时，给session赋值，req.session.user = user;express将自动更新数据库中session的值，将用户信息存储到数据库中

app.post("/user/signin", function(req, res){

    ...

    User.findOne({name:name}, function(err, user){

        ...

        user.comparePassword(password, function(err, isMatch){

            ...

            if(isMatch){
                console.log("登录成功");
                req.session.user = user;
                return res.redirect("/");
            }

            ...

        });
    });
});

取值过程：
//pre handle user,预处理所有的页面，如用户已经登录过，从session中取值赋值给本地变量
app.use(function(req, res, next){
  //调用req.session时，cookieParse将connect.sid解析成sessionid,通过sessionid从数据库中查找相应的session值
    console.log("req.session.user:",req.session);
    if(req.session.user){
      //将session中的值赋值给本地变量
        app.locals.user = req.session.user;
        console.log("app.locals.user:", app.locals.user);
    }
    next();
});
在header.jade中进行用户是否登录判断
    if user
      p.navbar-text.navbar-right
        span 欢迎您,#{user.name}
        span &nbsp;|&nbsp;
        a.navbar-link(href="/logout") 登出
    else
      p.navbar-text.navbar-right
        a.navbar-link(href="#", data-toggle="modal", data-target="#signupModal") 注册
        span &nbsp;|&nbsp;
        a.navbar-link(href="#", data-toggle="modal", data-target="#signinModal") 登录
如果用户已经登录显示：欢迎您,xxx|登出
如果用户没有登录显示：注册|登录

删除过程：
在登出的路由中，使用delete删除用户信息，注意即要删除session用户信息，也要删除locals本地用户信息
//logout
app.get("/logout", function(req, res){
    delete req.session.user;
    delete app.locals.user;
    res.redirect("/");
});
