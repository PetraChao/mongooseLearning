1.linux:

    问题:
    1.系统中文问题,国人可以全英文阅读,作为程序员我们当然也要提高自己的英文,但工作中和生活中也必须使用中文,所以将自己的系统配置改成了中文的。
    linux系统如何配置中文呢?从system settings –>language support 点击 install/remove languages 勾选 chinese(simplified) 点击apply changes 输入密码，等待下载安装。将language for menus and windows 的最底下看到灰色的汉语（中国)需要把他拖到english之上这是字体变成黑色，点击apply-system-wide将语言应用到整个系统,重启电脑便可以将系统设置为中文了。

2.业界良心之搜狗输入法。linux自带的拼音输入法非常难用，很多时候打不出自己想要的字来。所以强烈建议像我一样装一个搜狗输入法，下面将安装使用方法告诉大家。
    下载安装：到官网下载搜狗输入法,下载完后双击deb文件即可安装。
    安装完后需要配置输入法：依次点击并打开：“系统”---->“系统设置”---->“语言和支持”，“语言和支持”对话框中选择键盘输入方式为fcitx。接下来就是在终端中输入im-config，这时会出现一个对话框，点击OK，有一个对话框，点击Yes，你会看到下面的对话框。如果上面是fcitx，就不用管，直接关闭；如果不是，就修改上面的ibus为fcitx.点击OK即可。又会出现一个对话框，接着就是OK，最后重启电脑。之后，在终端中输入：fcitx-config-gtk3出现对话框如下。点击对话框左下角的（+）按钮，弹出另一个对话框如上图所示。然后，取消Only Show Current Language（很重要，否则不能找到刚安装过的搜狗输入法!）最后，在输入框中输入sogou，选中点击OK即可。添加完后将其放置到列表的最下方，注意，是最下方！！！然后默认输入法就是搜狗输入法了。

3.sublime text3
    下载安装后，配置中文参考http://jingyan.baidu.com/article/f3ad7d0ff8731609c3345b3b.html

    4.命令
    安装：
    下载：
    移动：
    ln -s

2.node:安装
参考http://my.oschina.net/blogshi/blog/260953

3.git:使用git作为版本控制工具
Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。那么什么是分布式管理系统呢？分布式版本控制 (DVCS) 是一种不需要中心服务器的管理文件版本的方法，但是它也可以使用中心服务器。更改可以被合并到 DVCS 的任何其他用户的系统中，因此可以实现非常灵活的工作流。

DVCS 的两个主要优点是：它比集中的版本控制更灵活，因为它除了支持传统的（集中式）工作流，还支持其他各种工作流；它比集中式服务器快得多，因为大多数操作在客户机本地进行，而不需要网络操作。 
在 DVCS 和集中式版本控制系统之间有三个关键差异。第一个差异是，DVCS 通过本地提交支持离线工作，这是由 DVCS 的操作方式决定的。这与集中式版本控制完全不同，集中式版本控制要求通过到中心服务器的连接执行所有操作。这种灵活性让开发人员在飞机上也能够像在办公室中一样轻松地工作，可以一次又一次地进行提交。

第二个差异是 DVCS 比集中式系统更灵活，因为 DVCS 支持许多不同类型的工作流，从传统的集中式工作流到纯粹的特殊工作流，再到特殊工作流和集中式工作流的组合。这种灵活性允许通过电子邮件、对等网络和开发团队喜欢的任何方式进行开发。

第三个差异是 DVCS 比集中式版本控制系统快得多，因为大多数操作在客户机上进行，速度非常快。另外，在需要进行推（push ）操作（与另一个节点通信）时，速度也更快，因为两个客户机机器上都有完整的元数据。速度差异相当显著，根据使用本地存储库还是网络存储库，DVCS 比 Subversion 快大约 3-10 倍。 

分布式的版本控制就是每个人都可以创建一个独立的代码仓库用于管理，各种版本控制的操作都可以在本地完成。每个人修改的代码都可以推送合并到另外一个代码仓库中。而像SVN这样，只有一个中央控制，所有的开发人员都必须依赖于这个代码仓库。每次版本控制的操作也必须链接到服务器才能完成。很多公司喜欢用集中式的版本控制是为了更好的控制代码。

github:
作为开源代码库以及版本控制系统，Github拥有140多万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。

ssh:
由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
参考http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C "youremail@example.com"

你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key：

4.mongodb：优点：http://blog.sina.com.cn/s/blog_70ac6bec0102wtj3.html，如何使用http://www.cnblogs.com/hoojo/archive/2011/06/01/2066426.html 运行时，需要先安装mongodb,尽管没有实际数据表，但我们仍然需要安装数据库，而且目前还不能通过npm和bower等包管理工具去安装mongodb，这是因为包管理工具定义的依赖不包括数据库，mongodb的安装参考http://www.cnblogs.com/zhoujinyi/archive/2013/06/02/3113868.html，自己的安装方法为：到官网https://www.mongodb.org/downloads下载对应安装包，将压缩包提取出来，建立软连接：ln -s /home/chao/软件/mongodb/mongodb-linux-x86_64-ubuntu1404-3.2.4/bin/mongo /usr/bin/mongo ，数据库文件默认是保存在data/db下的，但mongodb不会自动创建这个目录，所以需要在bin目录下执行mkdir -p /data/db创建目录，创建完成后，可以用sudo ./mongod命令启动mongodbad

5.开发过程中遇到的问题以及解决方式：
    1.相对路径和绝对路径。
    绝对路径：HTML绝对路径(absolute path)指带域名的文件的完整路径。经过多次真实实验，证明：绝对路径不利于搜索引擎表现，相对路径在搜索引擎中表现良好。除非链接是动态插入的，不然没办法在测试服务器上进行测试。因为里面的链接将直接指向真正的域名URL，而不是测试服务器中的URL。除非链接是动态插入的，不然移动内容页面将很困难。因为内容页面位置发生变化，在其他页面上的链接却可能无法跟着变化，还指向原来的已经硬编码的绝对路径。但绝对路径的优点则为就算网页被移动位置，里面的链接还是指向正确的URL，也就是说绝对路径可用于指向不轻易移动的内容。
    相对路径：相对路径就是指由这个文件所在的路径引起的跟其它文件（或文件夹）的路径关系。
    ../表示源文件所在目录的上一级目录，../../表示源文件所在目录的上上级目录，以此类推。
    ./表示当前目录，可以省略（但不明白 ./node -v 和 /node -v的区别）
    (ps：在linux中./还表示运行程序。例如：./<可执行程序>，表示运行该程序，比如有可执行程序，名叫print_name，./print_name表示运行该程序 )


    英文：binaries编译好的二进制文件，source code源文件，安装方式不同。

    其他：快捷键：ctrl+h显示隐藏文件，ubuntu的主目录指的是home/xx路径

                使用npm i node_module --mongoosesave自动更新dependencies字段值；
                使用npm i node_module --save-dev自动更新devDependencies字段值；
                一个node package有两种依赖，一种是dependencies一种是devDependencies，其中前者依赖的项该是正常运行该包时所需要的依赖项，而后者则是开发的时候需要的依赖项，像一些进行单元测试之类的包。
                devDependencies字段如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。在这种情况下，最好将这些附属的项目列在devDependencies中。
                ln 建立链接 -s软链接 
